###### whether to test this input file
InputFile.debug = true

###### Init Solver
Solver.Mesh.Nx = 100
Solver.Mesh.Ny = 100
Solver.Mesh.Nz = 1
Solver.Loop.begin_step = 0
Solver.Loop.end_step = 10000
Solver.Loop.screen_output_step = 100
Solver.Loop.vts_output_step = 100
Solver.Loop.data_output_step = 100000
Postprocess.PCT.VTS.phi = true
Postprocess.PCT.VTS.phi_index = true
Postprocess.PCT.VTS.con = true
Postprocess.PCT.VTS.potential = true
Postprocess.PCT.VTS.phi_name = true
Solver.PCT.TimeInterval.dt = 0.10000
Solver.Phi.is_normalize = true
Solver.Parallel.openmp_thread_counts = 5

Solver.Phases = {[(liquid),(c0)],[(solid),(c0)],[(precipitation),(c0)]} 
Solver.Comps = (c0)

Preprocess.Microstructure.is_datafile_init = true
Preprocess.Microstructure.datafile_path = ../1_structure/4_final/data_end.dat
Preprocess.fill_phis = {[(1),(0.001),(0.001),(0.0)],[(2),(0.001),(0.001),(0.0)],[(3),(0.001),(0.001),(0.0)],[(4),(0.001),(0.001),(0.0)]}

# ModelsManager.Phi.equation : 0 - Const, 1 - AllenCahn Standard, 2 - AllenCahn Pairwise, 3 - CahnHilliard Standard
ModelsManager.Phi.equation = 2
# ModelsManager.Phi.Lij.const  = Lij_value 
#                      .matrix = [(phi_i, phi_j, Lij_value), ... ] 
#ModelsManager.Phi.Lij.const = 0.10000
ModelsManager.Phi.Lij.matrix = [(1,5,0.1),(2,6,0.1),(3,7,0.1),(4,8,0.1)]
# ModelsManager.Phi.InterfaceEnergy.int_gradient : 0 - Steinbach_1996 , 1 - Steinbach_1999 , 2 - Steinbach_G2009
ModelsManager.Phi.InterfaceEnergy.int_gradient = 2
# ModelsManager.Phi.InterfaceEnergy.int_potential : 0 - Nestler_Well , 1 - Nestler_Obstacle , 2 - Steinbach_P2009
ModelsManager.Phi.InterfaceEnergy.int_potential = 2
ModelsManager.Phi.InterfaceEnergy.int_width = 6.000000
# ModelsManager.Phi.xi_ab.const  = xi_ab 
#                        .matrix = [(phi_a, phi_b, xi_ab_value), ...] 
ModelsManager.Phi.xi_ab.const = 1.000000
ModelsManager.Phi.xi_ab.matrix = [()]
# ModelsManager.Phi.xi_abc.const  = xi_ab 
#                         .matrix = [(phi_a, phi_b, phi_c, xi_abc_value), ...] 
ModelsManager.Phi.xi_abc.const = 0.010000

ModelsManager.Con.equation = 3
# ModelsManager.Con.valid_domain : 0 - Standard, 1 - Reverse
ModelsManager.Con.valid_domain = 1
ModelsManager.Con.ValidDomain.phase_indexes = (0)
ModelsManager.Con.ValidDomain.threshold = 0.900000
# ModelsManager.Con.Dij.const = Dii 
#                      .matrix = [(D_00, D_01, ...), (D_10, D_11, ...), ... ]
ModelsManager.Con.Dij.const = 0.10000
# ModelsManager.Phi.BulkEnergy.const = [(phi_name, bulk_energy), ... ]
ModelsManager.Phi.BulkEnergy.const = [(solid,0.0),(precipitation,-0.06)]

# Postprocess.Phi.interface_noise = {[(applied_phi_index),(generate_phi_index_0, ... ),(generate_phi_name_0, ... )], ... } 
Postprocess.Phi.interface_noise = {[(1),(5),(precipitation)],[(2),(6),(precipitation)],[(3),(7),(precipitation)],[(4),(8),(precipitation)]}
Postprocess.Phi.noise.is_start = true
Postprocess.Phi.noise.frequency = 200
Postprocess.Phi.noise.amplitude = 0.100000

Postprocess.Statistics.is_phi_c_t = true
